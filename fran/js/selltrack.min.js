class SellTrack {
  constructor(t, e, i) {
    (this.cookieName = t),
      (this.cookieLifetimeDays = e),
      (this.allowOverwrite = i),
      (this.utmKeys = [
        "utm_source",
        "utm_medium",
        "utm_campaign",
        "utm_content",
        "utm_term",
      ]),
      (this.shift = 5);
  }
  encrypt(t) {
    return t
      .split("")
      .map((t) => String.fromCharCode(t.charCodeAt(0) + this.shift))
      .join("");
  }
  decrypt(t) {
    return t
      .split("")
      .map((t) => String.fromCharCode(t.charCodeAt(0) - this.shift))
      .join("");
  }
  getUTMParams() {
    const t = new URLSearchParams(window.location.search);
    return this.utmKeys.reduce((e, i) => {
      const o = t.get(i);
      return o && (e[i] = o), e;
    }, {});
  }
  setCookie(t) {
    const e = this.encrypt(JSON.stringify(t)),
      i = new Date();
    i.setTime(i.getTime() + 24 * this.cookieLifetimeDays * 60 * 60 * 1e3);
    const o = "; expires=" + i.toUTCString();
    document.cookie = `${this.cookieName}=${encodeURIComponent(e)}${o}; path=/`;
  }
  getCookie() {
    const t = this.cookieName + "=",
      e = document.cookie
        .split(";")
        .map((t) => t.trim())
        .find((e) => e.startsWith(t));
    return e
      ? JSON.parse(this.decrypt(decodeURIComponent(e.substring(t.length))))
      : null;
  }
  manageUTMCookies() {
    const t = this.getUTMParams();
    if (0 === Object.keys(t).length) return;
    (this.getCookie() && !this.allowOverwrite) || this.setCookie(t);
  }
}
